# Simplified workflow to test release notes processing
# Based on Exograph's build-binaries.yml but simplified for testing
#
# This workflow:
# - Creates a draft release with auto-generated notes (only for tags)
# - Uses the previous semantic version tag to generate notes
# - Builds binaries (simplified for testing)

name: Release

on:
  push:
    branches: ["main"]
    tags:
      - "*"

jobs:
  # Create draft release with auto-generated notes (only for tags)
  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Create draft release with auto-generated notes
        run: |
          # Get the previous semantic version tag
          echo "Current tag: ${{ github.ref_name }}"
          echo "All tags:"
          git tag --list --sort=-version:refname

          PREVIOUS_TAG=$(git tag --list --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -2 | tail -1)

          # If PREVIOUS_TAG is the same as current tag, treat as no previous tag
          if [ "$PREVIOUS_TAG" = "${{ github.ref_name }}" ]; then
            PREVIOUS_TAG=""
          fi

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Previous tag found: $PREVIOUS_TAG"
            gh release create "${{ github.ref_name }}" \
              --draft \
              --generate-notes \
              --notes-start-tag "$PREVIOUS_TAG" \
              --title "Release ${{ github.ref_name }}"
          else
            echo "No previous tag found, generating notes from all history"
            gh release create "${{ github.ref_name }}" \
              --draft \
              --generate-notes \
              --title "Release ${{ github.ref_name }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build artifacts (simplified for testing)
  build-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Build
        run: |
          cargo build --release

      - name: Create zip of binaries
        run: |
          mkdir -p dist
          cp target/release/release-notes-exp dist/ || echo "No binary to copy"
          cp LICENSE dist/ || echo "LICENSE" > dist/LICENSE
          cd dist/
          zip release-notes-exp.zip *
          cd ..

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-exp.zip
          path: dist/release-notes-exp.zip

      - name: Upload zip to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/release-notes-exp.zip
          asset_name: release-notes-exp.zip
          tag: ${{ github.ref }}
          make_latest: false
