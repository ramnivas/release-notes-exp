# Simplified workflow to test release notes processing
# Based on Exograph's build-binaries.yml but simplified for testing
#
# This workflow:
# - Creates a draft release with custom-formatted notes (only for tags)
# - Uses mikepenz/release-changelog-builder-action for formatting
# - Uses the previous semantic version tag to scope notes between releases
# - Builds binaries (simplified for testing)

name: Release

on:
  push:
    branches: ["main"]
    tags:
      - "*"

permissions:
  contents: write

jobs:
  # Create draft release with custom-formatted notes (only for tags)
  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Find previous semantic version tag
        id: previous_tag
        run: |
          set -x  # Enable debug mode to see all commands

          # Get the previous semantic version tag
          echo "Current tag: ${{ github.ref_name }}"
          echo "All tags:"
          git tag --list --sort=-version:refname

          PREVIOUS_TAG=$(git tag --list --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -2 | tail -1)

          # Check if there are any commits between previous and current tag
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMIT_COUNT=$(git rev-list --count "$PREVIOUS_TAG".."${{ github.ref_name }}" 2>/dev/null || echo "0")
            echo "Commits between $PREVIOUS_TAG and ${{ github.ref_name }}: $COMMIT_COUNT"

            if [ "$COMMIT_COUNT" = "0" ]; then
              echo "No commits between tags, generating notes from all history"
              PREVIOUS_TAG=""
            fi
          fi

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Previous tag found: $PREVIOUS_TAG"
            echo "tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          else
            echo "No previous tag found or no commits between tags"
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes with custom format
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: |
            {
              "template": "#{{CHANGELOG}}",
              "pr_template": "- #{{TITLE}} #{{NUMBER}}",
              "categories": [
                {
                  "title": "## 🚨 Breaking Changes",
                  "labels": ["breaking", "breaking-change"]
                },
                {
                  "title": "## 🎉 Features",
                  "labels": ["feat", "feature", "enhancement"]
                },
                {
                  "title": "## 🐛 Bug Fixes",
                  "labels": ["bug", "fix", "bugfix"]
                },
                {
                  "title": "## 🔒 Security",
                  "labels": ["security"]
                },
                {
                  "title": "## 📚 Documentation",
                  "labels": ["documentation", "docs"]
                },
                {
                  "title": "## 🎨 Style",
                  "labels": ["style"]
                },
                {
                  "title": "## ⚡ Performance",
                  "labels": ["performance", "perf"]
                },
                {
                  "title": "## 🏗️ Refactoring",
                  "labels": ["refactor", "refactoring"]
                },
                {
                  "title": "## 🧪 Testing",
                  "labels": ["test", "testing"]
                },
                {
                  "title": "## 🔨 Build System",
                  "labels": ["build"]
                },
                {
                  "title": "## 👷 CI/CD",
                  "labels": ["ci", "cd"]
                },
                {
                  "title": "## 🔧 Maintenance",
                  "labels": ["chore", "dependencies", "maintenance"]
                },
                {
                  "title": "## ⏪ Reverts",
                  "labels": ["revert"]
                },
                {
                  "title": "## 🚀 Other Changes",
                  "labels": []
                }
              ],
              "label_extractor": [
                {
                  "pattern": ".*",
                  "on_property": "title"
                }
              ],
              "ignore_labels": ["ignore-for-release", "release"],
              "ignore_authors": ["dependabot", "dependabot[bot]"]
            }
          fromTag: ${{ steps.previous_tag.outputs.tag }}
          toTag: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create draft release with custom notes
        run: |
          gh release create "${{ github.ref_name }}" \
            --draft \
            --notes "${{ steps.changelog.outputs.changelog }}" \
            --title "Release ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build artifacts (simplified for testing)
  build-artifacts:
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Build
        run: |
          cargo build --release

      - name: Create zip of binaries
        run: |
          mkdir -p dist
          cp target/release/release-notes-exp dist/ || echo "No binary to copy"
          cp LICENSE dist/ || echo "LICENSE" > dist/LICENSE
          cd dist && zip release-notes-exp.zip * && cd ..

      - name: Upload zip to draft release
        run: |
          gh release upload "${{ github.ref_name }}" dist/release-notes-exp.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
